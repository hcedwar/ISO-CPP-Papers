<pre class='metadata'>
Title:  Atomic Ref
Abstract: Extension to the atomic operations library for atomic operations applied to non-atomic objects.
Editor: H. Carter Edwards, hcedwar@sandia.gov
Editor: Hans Boehm, hboehm@google.com
Editor: Olivier Giroux, ogiroux@nvidia.com
Editor: Christian Trott, crtrott@sandia.gov
Editor: Daniel Sunderland, dsunder@sandia.gov
Editor: Mark Hoemmen, mhoemme@sandia.gov
Editor: David Hollman, dshollm@sandia.gov
Editor: James Reus, reus1@llnl.gov
Shortname: D0019
Revision: 7
Audience: LWG
Status: D
Group: WG21
Date: 2019-03-14
Repository: https://github.com/kokkos/ISO-CPP-Papers.git
URL: https://kokkos.github.io/ISO-CPP-Papers/P0019.html
Warning: Custom
Custom Warning Title: Work in Progress
Custom Warning Text: This document is a work in progress that has not yet been
                     submitted to the committee for discussion in its current
                     form. 
Markup Shorthands: markdown yes
</pre>

Revision History
================

## [[P0019r3]]
  
-   Align proposal with content of corresponding sections in N5131, 2016-07-15.

-   Remove the *one root wrapping constructor* requirement from **atomic_array_view**.

-   Other minor revisions responding to feedback from SG1 @ Oulu.

## [[P0019r4]]
  
-   wrapper constructor strengthen requires clause and omit throws clause

-   Note types must be trivially copyable, as required for all atomics

-   2016-11-09 Issaquah SG1 decision: move to LEWG targeting Concurrency TS V2

## [[P0019r5]]

-   2017-03-01 Kona LEWG review

    -   Merge in P0440 Floating Point Atomic View because LEWG
        consensus to move P0020 Floating Point Atomic to C++20 IS

    -   Rename from **atomic_view** and **atomic_array_view**;
        authors' selection **atomic_ref<T>** and **atomic_ref<T[]>**,
        other name suggested **atomic_wrapper**.

    -   Remove **constexpr** qualification from default constructor
        because this qualification constrains implementations and
        does not add apparent value.

-   Remove default constructor, copy constructor, and assignment operator
    for tighter alignment with **atomic<T>** and prevent empty references.

-   Revise syntax to align with P0558r1, Resolving atomic<T>
    base class inconsistencies

-   Recommend feature next macro

## [[P0019r6]]

-   `2017-11-07 Albuquerque LEWG review
    <http://wiki.edg.com/bin/view/Wg21albuquerque/P0019>`_

    -   Settle on name **atomic_ref**

    -   Split out atomic_ref<T[]> into a separate paper,
        apply editorial changes accordingly

    -   Restore copy constructor; not assignment operator

    -   add **Throws: Nothing** to constructor but do not add noexcept

    -   Remove *wrapping* terminology

    -   Address problem of CAS on atomic_ref<T> where T is
        a struct containing padding bits

    -   With these revisions move to LWG
    
## [[P0019r7]]

-   Update to reference resolution of padding bits from P0528r2

-   Add a note clarifying that ``atomic_ref`` may not be lock free 
    even if ``atomic`` is lock free

Overview
========

This paper proposes an extension to the atomic operations library [atomics]
for atomic operations applied to non-atomic objects.
As required by [atomics.types.generic] 20.5p1 the value type **T**
must be trivially copyable.

This paper includes *atomic floating point* capability defined in P0020r5.

